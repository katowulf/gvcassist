rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /apps/gvcassistant {
        function docIsEmpty(doc) {
           return doc.data == null || doc.data.size() == 0;
        }

        function isDocOwner(doc) {
           return request.auth.uid in doc.data.owners;
        }

        function inWhitelist(doc) {
           return request.auth.email in doc.data.whitelist;
        }

        function inDomain(doc) {
           return "domain" in doc.data && request.auth.email.replace("^.*@", '') == doc.data.domain;
        }

        function canAccessFeed(roomId) {
            let room = get(/databases/$(database)/documents/rooms/$(roomId));
            return room.data.access == 'link' || inWhitelist(room) || inDomain(room) || isDocOwner(room);
        }

        match /publicProfiles/{uid} {
            allow get: if request.auth.uid != null;
        }

        match /privateProfiles/{uid} {
            allow get: if request.auth.uid == uid;
        }

        match /rooms/{roomId} {
            allow get: if isDocOwner(resource) || !exists(/databases/$(database)/documents/rooms/$(roomId));
            allow list: if request.query.limit <= 50 && isDocOwner(resource);
            allow create: if isDocOwner(request.resource);
        }

        match /feeds/{roomId} {
            allow read: if canAccessFeed(roomId);
        }
    }
  }
}