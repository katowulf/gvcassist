rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /apps/gvcassistant {
        function makePath(child) {
            return /databases/$(database)/documents/apps/gvcassistant/$(child);
        }

        function isDocOwner(doc) {
           return request.auth.uid in doc.data.owners;
        }

        function inWhitelist(doc) {
           return request.auth.token.email in doc.data.whitelist;
        }

        function inDomain(doc) {
           return doc.data.access == 'domain' && request.auth.token.email.replace("^.*@", '') == doc.data.domain;
        }

        function canListRoom(room) {
            return roomIsOpen(room) && (inWhitelist(room) || inDomain(room));
        }

        function isBlacklisted(room) {
	        return !request.auth.token.email || request.auth.token.email in room.data.blacklist;
        }

        function isDocReader(room) {
            return room.data.access == 'link' || inWhitelist(room) || inDomain(room);
        }

        function canSeeRoom(room) {
            return isDocOwner(room) || (!isBlacklisted(room) && isDocReader(room));
        }

        function roomIsOpen(room) {
            return room.data.closed == false;
        }

        function getRoom(roomId) {
           return get(makePath(/rooms/$(roomId)));
        }

        function feedIsWritable(roomId) {
           let room = getRoom(roomId);
           return roomIsOpen(room) && canSeeRoom(room);
        }

        match /publicProfiles/{uid} {
            allow get: if request.auth.uid != null;
        }

        match /privateProfiles/{uid} {
            allow get: if request.auth.uid == uid;
        }

        match /rooms/{roomId} {
            allow get: if canSeeRoom(resource) || !exists(makePath(/rooms/$(roomId)));
            allow list: if request.query.limit < 200 && isDocOwner(resource) || canListRoom(resource);

            allow create: if isDocOwner(request.resource);
            allow update: if isDocOwner(resource);
            allow delete: if isDocOwner(resource);

            match /feed/{eventId} {
                allow write: if feedIsWritable(roomId);
                allow list: if request.query.limit <= 1000 && canSeeRoom(getRoom(roomId));
            }
        }
    }
  }
}